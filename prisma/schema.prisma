// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl"]
  output   = "../../node_modules/@prisma/database"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Credentials {
  id       String @id @unique @default(uuid())
  email    String @unique
  password String
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  firstName      String
  lastName       String
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
  lastConnection DateTime     @default(now())
  civility       Civility     @default(unknown)
  storeCountry   Country      @default(FR)
  creditCard     CreditCard[]
  addresses      Address[]
  orders         Order[]
  cart           Article[]
}

model Article {
  id      String  @id @default(uuid())
  sale    Float   @default(0)
  skuId   String
  userId  String?
  guestId String?
  orderId String?
  sku     Sku     @relation(fields: [skuId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])
}

model Address {
  id                   String  @id @default(uuid())
  title                String  @default("")
  civility             String  @default("unknown")
  firstName            String
  lastName             String
  address1             String
  address2             String  @default("")
  zipCode              String
  city                 String
  country              String
  email                String
  phone                String
  prefixPhone          String
  userId               String?
  shippingOrderAddress Order[] @relation("shipping")
  billingOrderAddress  Order[] @relation("billing")
  user                 User?   @relation(references: [id], fields: [userId])
}

model CreditCard {
  id             String  @id @default(uuid())
  CCNumber       String
  ExpirationDate String
  CCV            Int
  cardOwner      String
  userId         String
  orders         Order[]
  user           User?   @relation(references: [id], fields: [userId])
}

model Order {
  id                String      @id @default(uuid())
  orderNumber       String
  total             Decimal
  trackingNumber    String      @default("")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  creditCardId      String
  userId            String
  billingAddressId  String?
  shippingAddressId String?
  articles          Article[]
  status            OrderStatus @default(waiting)
  creditCard        CreditCard? @relation(references: [id], fields: [creditCardId])
  user              User?       @relation(references: [id], fields: [userId])
  billingAddress    Address?    @relation("billing", fields: [billingAddressId], references: [id])
  shippingAddress   Address?    @relation("shipping", fields: [shippingAddressId], references: [id])
}

model Product {
  id              String    @id @default(uuid())
  isActive        Boolean   @default(true)
  name            String
  description     String
  imageUrl        String
  backgroundColor String
  price           Decimal   @default(0)
  sale            Decimal   @default(0)
  keywords        Keywords?
  skus            Sku[]
  gender          Gender    @default(man)
  category        Category  @default(t_shirt)
  color           Color     @default(white)
  season          Season    @default(winter)
}

model Sku {
  id        String    @id @default(uuid())
  ref       String
  quantity  Int
  productId String
  size      Size
  articles  Article[]
  product   Product   @relation(references: [id], fields: [productId])
}

model Selection {
  id              String      @id @default(uuid())
  title           String
  description     String
  selectionPath   String
  imageUrl        String
  backgroundColor String
  foregroundColor String      @default("white")
  isActive        Boolean     @default(true)
  dateStart       DateTime    @default(now())
  dateEnd         DateTime    @default(now())
  keywords        Keywords?
  countries       Country[]
  imageAspect     ImageAspect @default(portrait)
}

model Post {
  id              String        @id @default(uuid())
  title           String
  description     String?       @default("")
  imageUrl        String?
  foregroundColor String        @default("white")
  backgroundColor String        @default("")
  isActive        Boolean       @default(false)
  dateStart       DateTime      @default(now())
  dateEnd         DateTime      @default(now())
  keywords        Keywords?
  sections        PostSection[]
  countries       Country[]
}

model PostSection {
  id           String      @id @default(uuid())
  postId       String?
  title        String?     @default("")
  paragraph    String      @default("")
  localPath    String?     @default("")
  externalLink String?     @default("")
  imageUrl     String      @default("")
  keywords     Keywords?
  post         Post?       @relation(references: [id], fields: [postId])
  imageAspect  ImageAspect @default(landscape)
}

model Keywords {
  id            String       @id @default(uuid())
  productId     String?      @unique
  selectionId   String?      @unique
  postId        String?      @unique
  postSectionId String?      @unique
  indexes       String[]
  product       Product?     @relation(references: [id], fields: [productId])
  selection     Selection?   @relation(references: [id], fields: [selectionId])
  post          Post?        @relation(references: [id], fields: [postId])
  postSection   PostSection? @relation(references: [id], fields: [postSectionId])
}

model Store {
  id      String      @id @default(uuid())
  status  StoreStatus @default(open)
  country Country     @unique @default(FR)
}

model Theme {
  id        String    @id @default(uuid())
  isActive  Boolean   @default(true)
  name      String
  dateStart DateTime
  dateEnd   DateTime
  countries Country[]
}

enum Gender {
  man
  woman
  unisex
}

enum Category {
  shirt
  t_shirt
  sweat
  chino
  jogger
  jean
  short
  pull
  accessory
  swimsuit
  dress
  skirt
}

enum Size {
  xxs
  xs
  s
  m
  l
  xl
  xxl
  eu32
  eu34
  eu36
  eu38
  eu40
  eu42
  eu44
  eu46
  u
}

enum Color {
  black
  white
  red
  blue
  yellow
  green
  pink
  orange
  brown
  purple
  grey
}

enum OrderStatus {
  waiting
  paid
  shipped
  received
  returned
}

enum Civility {
  unknown
  Mr
  Ms
  Mrs
  Eir
  Dc
}

enum Season {
  winter
  spring
  summer
  autumn
}

enum ImageAspect {
  landscape
  portrait
  square
  maxWidth
}

enum Country {
  GB
  US
  FR
  JP
  ES
}

enum StoreStatus {
  open
  standBy
  maintenance
}
